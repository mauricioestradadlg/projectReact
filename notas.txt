Problema: 



-Codigos:



-frontend:

App.js:

import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom'; 
import axios from 'axios';
import Header from './componentes/Header';
import Navegation from './componentes/Navegation';
import Footer from './componentes/Footer';
import Carrito from './componentes/Carrito';
import BotonWha from './componentes/BotonWha';
import Inicio from './paginas/Inicio';
import AboutUs from './paginas/AboutUs';
import Catalogo from './paginas/Productos';
import Contacto from './paginas/Contacto';
import FormEnviado from './paginas/FormEnviado';
import PCgamer from './productos/PCgamer';
import Mousegamer from './productos/Mousegamer';
import Tecladogamer from './productos/Tecladogamer';
import Monitorgamer from './productos/Monitorgamer';
import Microfonogamer from './productos/Microfonogamer';
import Headsetgamer from './productos/Headsetgamer';
import './App.css';

function App() {
    const [formulario, setFormulario] = useState({
        nombre: '',
        correo: '',
        celular: '',
        mensaje: ''
    });

    const [productosEnCarrito, setProductosEnCarrito] = useState([]);


    useEffect(() => {
        const productosGuardados = JSON.parse(localStorage.getItem('productosEnCarrito'));
        if (productosGuardados) {
            setProductosEnCarrito(productosGuardados);
        }
    }, []); // Se ejecuta solo una vez al montar el componente
    

    const agregarAlCarrito = (producto) => {
        const nuevosProductos = [...productosEnCarrito, producto];
        setProductosEnCarrito(nuevosProductos);
        localStorage.setItem('productosEnCarrito', JSON.stringify(nuevosProductos));
        alert('Producto agregado al carrito');
        window.location.href = "/carrito";
       
    };

    const vaciarCarrito = () => {
        setProductosEnCarrito([]);
        localStorage.removeItem('productosEnCarrito');
    };

    return (
        <Router>
            <div>
                <Header /><br />
                <Navegation />
                <Routes>
                    <Route path="/carrito" element={<Carrito productosEnCarrito={productosEnCarrito} setProductosEnCarrito={setProductosEnCarrito} />} />
                    <Route path="/" element={<Inicio />} />
                    <Route path="/aboutus" element={<AboutUs />} />
                    <Route path="/catalogo" element={<Catalogo />} />
                    <Route path="/catalogo/pcgamer" element={<PCgamer agregarAlCarrito={agregarAlCarrito} />} />
                    <Route path="/catalogo/mousegamer" element={<Mousegamer agregarAlCarrito={agregarAlCarrito} />} />
                    <Route path="/catalogo/tecladogamer" element={<Tecladogamer agregarAlCarrito={agregarAlCarrito} />} />
                    <Route path="/catalogo/headsetgamer" element={<Headsetgamer agregarAlCarrito={agregarAlCarrito} />} />
                    <Route path="/catalogo/microfonogamer" element={<Microfonogamer agregarAlCarrito={agregarAlCarrito} />} />
                    <Route path="/catalogo/monitorgamer" element={<Monitorgamer agregarAlCarrito={agregarAlCarrito} />} />
                    <Route path="/contacto" element={<Contacto />} />
                    <Route path="/formEnviado" element={<FormEnviado />} />
                    
                </Routes>
                <BotonWha />
                <Footer />
            </div>
        </Router>
    );
}

export default App;


package.json:

{
  "name": "frontend",
  "version": "0.1.0",
  "proxy": "http://localhost:3000",
  "private": true,
  "dependencies": {
    "@stripe/stripe-js": "^3.3.0",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.6.8",
    "react": "^18.3.1",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.23.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}



-backend:


server.js:

require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const app = express();
const PORT = process.env.PORT || 3000;
const cors = require('cors');

app.use(cors({
    origin: 'http://localhost:3001',
    credentials: true
}));

app.get('/', (req, res) => {
    res.send('Conexión exitosa entre React y Node JS');
});

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log('Conexión exitosa a la base de datos');
}).catch((error) => {
    console.error('Error al conectar a la base de datos:', error);
});

const userBeastGadgets = new mongoose.Schema({
    nombre: String,
    correo: String,
    celular: Number,
    mensaje: String
});

const Usuario = mongoose.model('Usuario', userBeastGadgets);

app.post('/contacto', async (req, res) => {
    try {
        const { nombre, correo, celular, mensaje } = req.body;

        const newUser = new Usuario({
            nombre,
            correo,
            celular,
            mensaje
        });

        await newUser.save();
        console.log('Formulario enviado correctamente');

        res.redirect('/'); // Cambiar a la ruta de tu página de éxito
    } catch (error) {
        console.error('Error al enviar el formulario:', error);
        res.status(500).send('Error al enviar el formulario');
    }
});

app.post('/checkout-session', async (req, res) => {
    try {
        const { productos } = req.body;

        const lineItems = productos.map((producto) => ({
            price_data: {
                currency: 'mxn',
                product_data: {
                    name: producto.nombre,
                },
                unit_amount: producto.precio * 100,
            },
            quantity: 1,
        }));

        const session = await stripe.checkout.sessions.create({
            payment_method_types: ['card'],
            line_items: lineItems,
            mode: 'payment',
            success_url: 'http://localhost:3001/formEnviado',
            cancel_url: 'http://localhost:3001/carrito',
        });

        res.json({ sessionId: session.id });
    } catch (error) {
        console.error('Error al crear el checkout session:', error);
        res.status(500).json({ error: 'Error al crear el checkout session' });
    }
});

app.listen(PORT, () => {
    console.log(`Servidor iniciado en http://localhost:${PORT}`);
});



package.json:


{
  "name": "backend",
  "version": "1.0.0",
  "description": "",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "mongoose": "^8.3.2",
    "moongose": "^1.0.0",
    "stripe": "^15.4.0"
  }
}
